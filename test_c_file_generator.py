import sqlite3
from collections import defaultdict
import os

def generate_fake_binary(vendor, package, pattern_string):
    path = os.path.join(os.path.expanduser("~"), ".cache", "cvedb", "cve.db")
    print(path)
    conn = sqlite3.connect(path)
    c = conn.cursor()
    query = """SELECT version, cve_number FROM cve_range WHERE vendor=? AND product=?"""
    c.execute(query, [vendor, package])
    d = defaultdict(list)
    for version, cve in c.fetchall():
        d[version].append(cve)

    fake_cve = max(filter(lambda x: "*" not in x[0], map(lambda x: (x[0], len(x[1])), d.items())), key=lambda x: (x[1], x[0]))
    version = fake_cve[0]
    c_file = f"""#include <stdio.h>

int main() {{
    printf("This program is designed to test the cve-bin-tool checker.");
    printf("It outputs a few strings normally associated with {package} {version}.");
    printf("They appear below this line.");
    printf("------------------");
    printf("An unknown option was passed in to {package}");
    printf("{pattern_string.format(version)}");
    return 0;
}}
"""
    if not os.path.isdir(package):
        os.mkdir(package)
    with open(f"{package}\\test-{package}-{version}.c", "w") as f:
        f.write(c_file)
        
if __name__ == "__main__":
    generate_fake_binary("haxx", "curl", "curl {}")