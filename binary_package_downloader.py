import requests
from bs4 import BeautifulSoup as bs
from collections import defaultdict
from PyInquirer import Separator, Token, prompt, style_from_dict
import json
import re

style = style_from_dict(
    {
        Token.Separator: "#15ff00",
        Token.QuestionMark: "#673ab7 bold",
        Token.Selected: "#cc5454",  # default
        Token.Pointer: "#66d9ef bold",
        Token.Instruction: "#ae81ff",  # default
        Token.Answer: "#f44336 bold",
        Token.Question: "#66d9ef",
    }
)
q1 = [
    {
        "type": "input",
        "message": "Enter package name you want to analyse:",
        "name": "package",
        "validate": lambda text: len(text) != 0 or "Enter a valid package",
    },
]
q2 = [
    {
        "type": "list",
        "message": "Select a debian version you want to analyse:",
        "name": "deb_version",
        "choices": [],
        "validate": lambda answer: "You must choose a product."
        if len(answer) == 0
        else True,
    },   
    {
        "type": "list",
        "message": "Select a centos version you want to analyse:",
        "name": "cent_version",
        "choices": [],
        "validate": lambda answer: "You must choose a product."
        if len(answer) == 0
        else True,
    },   
]
q3 = [
    {
        "type": "list",
        "message": "Select a package you want to analyse for Debian",
        "name": "deb_url",
        "choices": [],
        "validate": lambda answer: "You must choose a product."
        if len(answer) == 0
        else True,
    },
    {
        "type": "list",
        "message": "Select a package you want to analyse for CentOS",
        "name": "cent_url",
        "choices": [],
        "validate": lambda answer: "You must choose a product."
        if len(answer) == 0
        else True,
    },
]

a1 = prompt(q1, style=style)
package = a1["package"]

url = f"https://pkgs.org/search/?q={package}"
headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}
response = requests.get(url, headers=headers)
soup = bs(response.content, "lxml")
allpkgs = soup.findAll("tr")
pkgs = defaultdict(dict)
current = None
for pkg in allpkgs:
    new = pkg.find("td", {"class": "bold pl-3"})
    if new:
        current = new.contents[0].strip()
    elif current:
        td = pkg.find("td", {"class": "w-50 pl-4"})
        th = pkg.find("td", {"class": "d-none d-md-block"})
        if td and th:
            th=th.contents[0].strip()
            pkgs[current].update({th: td.find("a").attrs["href"]})

deblist = []
for pkg in pkgs:
    if "debian" in pkg.lower():
        deblist.append(pkg)
q2[0]["choices"] = deblist

centlist = []
for pkg in pkgs:
    if "cent" in pkg.lower():
        centlist.append(pkg)
q2[1]["choices"] = centlist

a2 = prompt(q2, style=style)
deb_ver = a2["deb_version"]
cent_ver = a2["cent_version"]

q3[0]["choices"] = list(pkgs[deb_ver].keys())
q3[1]["choices"] = list(pkgs[cent_ver].keys())

a3 = prompt(q3, style=style)
deb_url = a3["deb_url"]
cent_url = a3["cent_url"]

deb_url = pkgs[deb_ver][deb_url]
cent_url = pkgs[cent_ver][cent_url]

links = {}
deb_res = requests.get(deb_url, headers=headers)
deb_soup = bs(deb_res.content, "lxml")
tables = deb_soup.findAll("tr")
for table in tables:
    check = table.find("th")
    if check and check.contents[0] == "Binary Package":
        links["debian"] = table.find("td").contents[0]
        break
cent_res = requests.get(cent_url, headers=headers)
cent_soup = bs(cent_res.content, "lxml")
tables = cent_soup.findAll("tr")
for table in tables:
    check = table.find("th")
    if check and check.contents[0] == "Binary Package":
        links["centos"] = table.find("td").contents[0]
        break

print("Downloading binary package for debian")
response = requests.get(links["debian"], headers=headers)
deblink = links["debian"].split("/")
with open(deblink[-1], "wb") as f:
    f.write(response.content)

print("Downloading binary package for centos")
response = requests.get(links["centos"], headers=headers)
centlink = links["centos"].split("/")
with open(centlink[-1], "wb") as f:
    f.write(response.content)

data = []
version = "UNKNOWN"
match = re.search(r"((\d+\.)+\d+)", links["debian"])
if match:
    version = match.group(1)   
deb_data = ('/'.join(deblink[:len(deblink) - 1]),
        deblink[-1],
        package,
        version)
data.append(deb_data)

version = "UNKNOWN"
match = re.search(r"((\d+\.)+\d+)", links["centos"])
if match:
    version = match.group(1)   
cent_data = ('/'.join(centlink[:len(centlink) - 1]),
        centlink[-1],
        package,
        version)
data.append(cent_data)

print("Writing long_test file")
with open("long_test.json", "w") as f:
    json.dump(data, f)