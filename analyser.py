import subprocess
import os
import json 
import sys

def analyse(fptr, filename):
    if os.path.isdir(filename):
        for file in os.listdir(filename):
            file = filename + "\\" + file
            analyse(fptr, file)
    else:
        subprocess.call(["strings", filename], stdout=fptr)

def extract_centos(filename):
    subprocess.call(["7z", "x", filename])

    filename = filename.split(".")
    filename = filename[: len(filename) - 1]
    filename.append("cpio")
    filename = ".".join(filename)

    extract = f'-o"{os.path.abspath(".")}\centos"'
    subprocess.call(f"7z x {filename} {extract}")
    os.remove(filename)

def extract_debian(filename):
    subprocess.call(["7z", "x", filename])

    filename = "data.tar"

    extract = f'-o"{os.path.abspath(".")}\debian"'
    subprocess.call(f"7z x {filename} {extract}")
    os.remove(filename)  

if __name__ == "__main__":
    
    """
    [Usage]: python analyser.py <package_name> 
    [Requires]: 7zip, MinGW strings binary. 
    [Summary]: Analyse downloaded packages with binary_package_downloader and
        create several important output files:
        1) debian_version_string: Outputs strings in the .deb binary file which contains version.
        2) centos_version_string: Outputs strings in the .rpm binary file which contains version.
        3) similar_string: Outputs strings found similar in both rpm and deb packages.
    """

    package = sys.argv[1]
    os.chdir(package)
    
    with open("long_test.json") as f:
        data = json.load(f)

    centfile = data[1][1]
    extract_centos(centfile)

    debfile = data[0][1]
    extract_debian(debfile)

    with open("centos_output", "w") as fptr:
        analyse(fptr, "centos")

    with open("debian_output", "w") as fptr:
        analyse(fptr, "debian")
        
    with open("centos_output", "r") as fptr:
        o1 = set(fptr.readlines())

    with open("debian_output", "r") as fptr:
        o2 = set(fptr.readlines())
        
    with open("similar_string", "w") as fptr:
        fptr.writelines(list(o1 & o2))
        
    v1 = data[1][3]
    cent_ver = []
    for i in o1:
        if v1 in i:
            cent_ver.append(i)

    v2 = data[0][3]
    deb_ver = []
    for i in o2:
        if v2 in i:
            deb_ver.append(i)
    
    with open("centos_version_string", "w") as fptr:
        fptr.writelines(cent_ver)

    with open("debian_version_string", "w") as fptr:
        fptr.writelines(deb_ver)